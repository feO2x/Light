<#@ assembly name="System.Core" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#+
    private const string IndentCharacters = "    ";

    public string[] NumericalTypesWithoutEqualityIssues =
    {
        "int",
        "long",
        "short",
        "uint",
        "ulong",
        "ushort",
        "byte",
        "sbyte",
        "decimal",
        "char"
    };

    public string[] AllNumericalTypes =
    {
        "int",
        "long",
        "short",
        "uint",
        "ulong",
        "ushort",
        "byte",
        "sbyte",
        "decimal",
        "char",
        "double",
        "float"
    };

    private void StartNamespace(string @namespace = "Light.GuardClauses")
    {
        WriteLine("namespace {0}", @namespace);
        WriteLine("{");
        PushIndent();
    }

    private void StartTestNamespace()
    {
        StartNamespace("Light.GuardClauses.Tests");
    }

    private void EndNamespace()
    {
        PopIndent();
        WriteLine("}");
    }

    private void StartClass(string classHeader)
    {
        WriteLine(classHeader);
        WriteLine("{");
        PushIndent();
    }

    private void StartPartialGuardClass()
    {
        WriteLine("public partial class Guard");
        WriteLine("{");
        PushIndent();
    }

    private void EndClass()
    {
        PopIndent();
        WriteLine("}");
    }

    private void PushIndent()
    {
        PushIndent(IndentCharacters);
    }

    private void WriteFactAttribute(string displayName)
    {
        WriteLine("[Fact(DisplayName = \"{0}\"", displayName);
    }

    private void WriteTheoryAttribute(string displayName)
    {
        WriteLine("[Theory(DisplayName = \"{0}\")]", displayName);
    }

    private void WriteConditionalAttribute()
    {
        WriteLine("[Conditional(PreconditionSymbol)]");
    }

    private void StartMethod(string format, params object[] arguments)
    {
        WriteConditionalAttribute();
        WriteLine(format, arguments);
        WriteLine("{");
        PushIndent();
    }

    private void EndMethod()
    {
        PopIndent();
        WriteLine("}");
    }

    private void InsertNamespaces(params string[] namespaces)
    {
        foreach (var @namespace in namespaces)
        {
            WriteLine("using {0};", @namespace);
        }
        WriteLine(string.Empty);
    }

#>